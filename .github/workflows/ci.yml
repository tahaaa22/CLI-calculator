name: CI/CD Pipeline

# Trigger on push to main branch and pull requests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      # Step 4: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov setuptools wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 5: Build the project
      - name: Build project
        run: |
          python setup.py build_ext --inplace

      # Step 6: Run C tests
      - name: Run C tests
        run: |
          gcc -Wall -Wextra -std=c99 -o tests/test_c_calc tests/test_c_calc.c c_backend/calc.c
          ./tests/test_c_calc

      # Step 7: Run Python tests
      - name: Run Python tests
        run: |
          python -m pytest python_interface/test_python_calc.py -v

      # Step 8: Test CLI functionality
      - name: Test CLI
        run: |
          python python_interface/cli.py --help || echo "CLI help test completed"
          python python_interface/cli.py 5 + 3 || echo "CLI calculation test completed"

  # Job 2: Code Quality (Optional but recommended)
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Lint Python code
        run: |
          # Check if files exist before linting
          if [ -f python_interface/cli.py ]; then
            flake8 python_interface/ --count --select=E9,F63,F7,F82 --show-source --statistics
          fi

      - name: Check formatting (optional)
        run: |
          if [ -f python_interface/cli.py ]; then
            black --check python_interface/ || echo "Consider running 'black python_interface/' to format code"
          fi

  # Job 3: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, cpp

      - name: Build for analysis
        run: |
          python setup.py build_ext --inplace

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
